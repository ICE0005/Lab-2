{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2333458-a9ab-4f31-9db5-564cdf698e24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test list: [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n",
      "Median: 5.0\n",
      "Mode: 5\n",
      "Mean: 5.0\n",
      "\n",
      "Empty list test:\n",
      "Median: 0\n",
      "Mode: 0\n",
      "Mean: 0\n"
     ]
    }
   ],
   "source": [
    "def median(numbers):\n",
    "    \"\"\"\n",
    "    Computes the median of a list of numbers.\n",
    "    \n",
    "    :param numbers: A list of numbers\n",
    "    :return: The median value, or 0 if the list is empty\n",
    "    \"\"\"\n",
    "    if not numbers:\n",
    "        return 0\n",
    "    \n",
    "    sorted_numbers = sorted(numbers)\n",
    "    length = len(sorted_numbers)\n",
    "    midpoint = length // 2\n",
    "    \n",
    "    if length % 2 == 0:\n",
    "        return (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n",
    "    else:\n",
    "        return sorted_numbers[midpoint]\n",
    "\n",
    "def mode(numbers):\n",
    "    \"\"\"\n",
    "    Computes the mode of a list of numbers.\n",
    "    \n",
    "    :param numbers: A list of numbers\n",
    "    :return: The mode value, or 0 if the list is empty\n",
    "    \"\"\"\n",
    "    if not numbers:\n",
    "        return 0\n",
    "    \n",
    "    # Create a dictionary to store frequency of each number\n",
    "    frequency = {}\n",
    "    for num in numbers:\n",
    "        frequency[num] = frequency.get(num, 0) + 1\n",
    "    \n",
    "    # Find the maximum frequency\n",
    "    max_frequency = max(frequency.values())\n",
    "    \n",
    "    # Find the number with the maximum frequency\n",
    "    for num, freq in frequency.items():\n",
    "        if freq == max_frequency:\n",
    "            return num\n",
    "\n",
    "def mean(numbers):\n",
    "    \"\"\"\n",
    "    Computes the mean (average) of a list of numbers.\n",
    "    \n",
    "    :param numbers: A list of numbers\n",
    "    :return: The mean value, or 0 if the list is empty\n",
    "    \"\"\"\n",
    "    if not numbers:\n",
    "        return 0\n",
    "    \n",
    "    return sum(numbers) / len(numbers)\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Tests the statistical functions with a given list.\n",
    "    \"\"\"\n",
    "    test_list = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\n",
    "    \n",
    "    print(f\"Test list: {test_list}\")\n",
    "    print(f\"Median: {median(test_list)}\")\n",
    "    print(f\"Mode: {mode(test_list)}\")\n",
    "    print(f\"Mean: {mean(test_list)}\")\n",
    "    \n",
    "    # Test with an empty list\n",
    "    empty_list = []\n",
    "    print(f\"\\nEmpty list test:\")\n",
    "    print(f\"Median: {median(empty_list)}\")\n",
    "    print(f\"Mode: {mode(empty_list)}\")\n",
    "    print(f\"Mean: {mean(empty_list)}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71c8d389-0761-4add-8783-2af47283fbe4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
